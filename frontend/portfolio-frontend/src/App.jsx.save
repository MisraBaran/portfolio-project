import { useEffect, useState } from "react";

const API = "http://localhost:8080/api";

function fmtTRY(n){ return new Intl.NumberFormat("tr-TR",{style:"currency",currency:"TRY"}).format(n); }

export default function App() {
  // Auth state
  const [token, setToken] = useState(localStorage.getItem("token") || "");
  const [mode, setMode] = useState("login"); // 'login' | 'register'
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  // Portfolio state
  const [items, setItems] = useState([]);
  const [symbol, setSymbol] = useState("");
  const [quantity, setQuantity] = useState(1);
  const [buyPrice, setBuyPrice] = useState("");
  const [error, setError] = useState("");

  const authFetch = async (url, options = {}) => {
    const headers = {
      ...(options.headers || {}),
      ...(token ? { Authorization: `Bearer ${token}` } : {})
    };
    const res = await fetch(url, { ...options, headers });
    if (!res.ok) {
      const msg = await res.text();
      throw new Error(msg || `HTTP ${res.status}`);
    }
    return res;
  };

  const load = async () => {
    if (!token) return;
    try {
      const res = await authFetch(`${API}/stocks`);
      const data = await res.json();
      setItems(data);
      setError("");
    } catch (e) {
      setError(e.message);
    }
  };

  const addStock = async (e) => {
    e.preventDefault();
    try {
      await authFetch(`${API}/stocks`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          symbol,
          quantity: Number(quantity),
          buyPrice: Number(buyPrice)
        })
      });
      setSymbol(""); setQuantity(1); setBuyPrice("");
      await load();
    } catch (e) {
      setError(e.message);
    }
  };

  const doAuth = async (path) => {
    try {
      const res = await fetch(`${API}/auth/${path}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password })
      });
      if (!res.ok) throw new Error(await res.text());
      const data = await res.json(); // { token: "..." }
      localStorage.setItem("token", data.token);
      setToken(data.token);
      setEmail(""); setPassword("");
      setError("");
      await load();
    } catch (e) {
      setError(e.message || "Giriş/Kayıt hatası");
    }
  };

  const logout = () => {
    localStorage.removeItem("token");
    setToken("");
    setItems([]);
  };

  useEffect(() => {
    if (token) {
      load();
      const id = setInterval(load, 10000); // 10 sn’de bir yenile
      return () => clearInterval(id);
    }
  }, [token]);

  if (!token) {
    return (
      <div style={{ maxWidth: 420, margin: "40px auto", fontFamily: "system-ui" }}>
        <h1>Portföy • Giriş</h1>
        <div style={{ marginBottom: 12 }}>
          <button
            onClick={() => setMode("login")}
            style={{ marginRight: 8, fontWeight: mode==="login" ? "bold" : "normal" }}
          >Giriş</button>
          <button
            onClick={() => setMode("register")}
            style={{ fontWeight: mode==="register" ? "bold" : "normal" }}
          >Kayıt</button>
        </div>
        <div style={{ display: "flex", flexDirection: "column", gap: 8 }}>
          <input placeholder="E-posta" value={email} onChange={e=>setEmail(e.target.value)} />
          <input type="password" placeholder="Şifre (min 6)" value={password} onChange={e=>setPassword(e.target.value)} />
          <button onClick={() => doAuth(mode)}>{mode === "login" ? "Giriş Yap" : "Kayıt Ol"}</button>
          {error && <div style={{ color: "crimson" }}>{error}</div>}
          <p style={{ color: "#666" }}>
            Test için: <code>sude2@example.com / 123456</code> ile <b>Giriş</b> yapabilirsin (az önce token aldığın kullanıcı).
          </p>
        </div>
      </div>
    );
  }

  return (
    <div style={{ maxWidth: 900, margin: "24px auto", fontFamily: "system-ui" }}>
      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "baseline" }}>
        <h1>Portföyüm</h1>
        <button onClick={logout}>Çıkış</button>
      </div>

      {error && <div style={{ color: "crimson", marginBottom: 12 }}>{error}</div>}

      <form onSubmit={addStock} style={{ display: "flex", gap: 8, marginBottom: 16 }}>
        <input placeholder="Sembol (ASELS)" value={symbol} onChange={e=>setSymbol(e.target.value)} required />
        <input type="number" min="1" value={quantity} onChange={e=>setQuantity(e.target.value)} required />
        <input type="number" step="0.01" min="0.01" placeholder="Alış Fiyatı"
               value={buyPrice} onChange={e=>setBuyPrice(e.target.value)} required />
        <button>Ekle</button>
      </form>

      <table border="1" cellPadding="8" style={{ width: "100%" }}>
        <thead>
          <tr>
            <th>Sembol</th><th>Adet</th><th>Alış</th><th>Son</th><th>Değer</th><th>Kâr/Zarar</th>
          </tr>
        </thead>
        <tbody>
          {items.map(s => {
            const value = Number(s.currentPrice) * Number(s.quantity);
            const pnl = (Number(s.currentPrice) - Number(s.buyPrice)) * Number(s.quantity);
            return (
              <tr key={s.id}>
                <td>{s.symbol}</td>
                <td>{s.quantity}</td>
                <td>{fmtTRY(s.buyPrice)}</td>
                <td>{fmtTRY(s.currentPrice)}</td>
                <td>{fmtTRY(value)}</td>
                <td style={{ color: pnl >= 0 ? "green" : "crimson" }}>{fmtTRY(pnl)}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}
import { useEffect, useState } from "react";

const API = "http://localhost:8080/api";

function fmtTRY(n){ return new Intl.NumberFormat("tr-TR",{style:"currency",currency:"TRY"}).format(n); }

export default function App() {
  const [items, setItems] = useState([]);
  const [symbol, setSymbol] = useState("");
  const [quantity, setQuantity] = useState(1);
  const [buyPrice, setBuyPrice] = useState("");

  const load = async () => {
    const res = await fetch(`${API}/stocks`);
    const data = await res.json();
    setItems(data);
  };

  const addStock = async (e) => {
    e.preventDefault();
    await fetch(`${API}/stocks`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ symbol, quantity: Number(quantity), buyPrice: Number(buyPrice) })
    });
    setSymbol(""); setQuantity(1); setBuyPrice("");
    load();
  };

  useEffect(() => {
    load();
    const id = setInterval(load, 10000); // 10 sn’de bir yenile
    return () => clearInterval(id);
  }, []);

  return (
    <div style={{ maxWidth: 900, margin: "24px auto", fontFamily: "system-ui" }}>
      <h1>Portföyüm</h1>

      <form onSubmit={addStock} style={{ display: "flex", gap: 8, marginBottom: 16 }}>
        <input placeholder="Sembol (ASELS)" value={symbol} onChange={e=>setSymbol(e.target.value)} required />
        <input type="number" min="1" value={quantity} onChange={e=>setQuantity(e.target.value)} required />
        <input type="number" step="0.01" min="0.01" placeholder="Alış Fiyatı"
               value={buyPrice} onChange={e=>setBuyPrice(e.target.value)} required />
        <button>Ekle</button>
      </form>

      <table border="1" cellPadding="8" style={{ width: "100%" }}>
        <thead>
          <tr>
            <th>Sembol</th><th>Adet</th><th>Alış</th><th>Son</th><th>Değer</th><th>Kâr/Zarar</th>
          </tr>
        </thead>
        <tbody>
          {items.map(s => {
            const value = Number(s.currentPrice) * Number(s.quantity);
            const pnl = (Number(s.currentPrice) - Number(s.buyPrice)) * Number(s.quantity);
            return (
              <tr key={s.id}>
                <td>{s.symbol}</td>
                <td>{s.quantity}</td>
                <td>{fmtTRY(s.buyPrice)}</td>
                <td>{fmtTRY(s.currentPrice)}</td>
                <td>{fmtTRY(value)}</td>
                <td style={{ color: pnl >= 0 ? "green" : "crimson" }}>{fmtTRY(pnl)}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}

